{"title":"如何优雅地展开(拍平)一个数组","uid":"2a5b9e073fe829313e9670bd00f2af01","slug":"elegantly-flatten-a-list","date":"2020-12-18T03:17:20.000Z","updated":"2023-01-12T09:50:07.540Z","comments":true,"path":"api/articles/elegantly-flatten-a-list.json","keywords":null,"cover":"https://images.unsplash.com/photo-1561736778-92e52a7769ef?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2340&q=80","content":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>给定任一数组<code>xs</code>，其内部可能包含任意类型的值或是其他数组。我们希望展开<code>xs</code>内部所有的值，变为一个一维数组。例如：</p>\n<ol>\n<li><code>flatten([1, [3], [[6, 7], [[[]], 8]]]) =&gt; [1, 3, 6, 7, 8]</code></li>\n<li><code>flatten([&#123;a: 3&#125;, 1, [[&#39;&#39;], 2]]) =&gt; [&#123;a: 3&#125;, 1, &#39;&#39;, 2]</code></li>\n</ol>\n<h2 id=\"递归方案\"><a href=\"#递归方案\" class=\"headerlink\" title=\"递归方案\"></a>递归方案</h2><p>当我们要实现一个递归的方案时，我们必须避免递归地去思考。不要让你的代码陷入到递归调用里。<br>正确的方法是假设你的函数能够在一个输入一个较小的数组时正常工作，在这种情况下，较小的输入结构显然是<code>xs</code>的尾部，即<code>xs.slice(1)</code>。<br>这种假设称为<code>信仰之跃</code>。</p>\n<p>那么，当<code>flatten(xs.slice(1))</code>能够正确输出时，我们怎么样来完成整个的<code>flatten(xs)</code>呢？显然我们还缺少<code>xs[0]</code>,<code>xs[0]</code>可能是一个非数组，也有可能是一个数组。</p>\n<p>如果<code>xs[0]</code>是个非数组，那处理起来就很简单，我们直接给他加到数组的第一个位置就行。</p>\n<p>如果<code>xs[0]</code>是个数组呢，那我们就继续<code>信仰之跃</code>，然后递归的调用<code>flatten(xs[0])</code>,把结果合并起来就好。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">xs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>xs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>至此，基本算是完成了。不过我们还忽略了最简单的输入，如果输入的是个空数组呢？我们应该直接返回空数组。</p>\n<p>所以，最终代码如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">xs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>xs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","text":"问题给定任一数组xs，其内部可能包含任意类型的值或是其他数组。我们希望展开xs内部所有的值，变为一个一维数组。例如： flatten([1, [3], [[6, 7], [[[]], 8]]]) =&gt; [1, 3, 6, 7, 8] flatten([&#123;a: 3&...","link":"","photos":[],"count_time":{"symbolsCount":962,"symbolsTime":"1 mins."},"categories":[{"name":"frontend","slug":"frontend","count":13,"path":"api/categories/frontend.json"},{"name":"javascript","slug":"frontend/javascript","count":3,"path":"api/categories/frontend/javascript.json"}],"tags":[{"name":"frontend","slug":"frontend","count":12,"path":"api/tags/frontend.json"},{"name":"javascript","slug":"javascript","count":5,"path":"api/tags/javascript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%92%E5%BD%92%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">递归方案</span></a></li></ol>","author":{"name":"Zhongkang Shen","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/18032128?s=96&v=4","link":"/","description":"太阳玄烨","socials":{"github":"https://github.com/shenzhongkang","twitter":"https://twitter.com/shenzhongkang","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/shenzhongkang","zhihu":"","csdn":"https://blog.csdn.net/shenzhongkang","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"一些代码优化技巧","uid":"07a79f5d09140cc1a089be652513c5fe","slug":"javascript-34-shorthands","date":"2021-01-05T06:42:57.000Z","updated":"2023-01-12T09:50:07.540Z","comments":true,"path":"api/articles/javascript-34-shorthands.json","keywords":null,"cover":"https://images.pexels.com/photos/5483071/pexels-photo-5483071.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2","text":"1. 判断多个平行条件 可以将参与判断的多个条件存为一个数组，使用数组的 includes 方法判断 // longhand if (x === 'abc' || x === 'def' || x === 'ghi' || x === 'jkl') &#123; /*** som...","link":"","photos":[],"count_time":{"symbolsCount":"8k","symbolsTime":"7 mins."},"categories":[{"name":"frontend","slug":"frontend","count":13,"path":"api/categories/frontend.json"},{"name":"tips","slug":"frontend/tips","count":1,"path":"api/categories/frontend/tips.json"}],"tags":[{"name":"frontend","slug":"frontend","count":12,"path":"api/tags/frontend.json"},{"name":"code","slug":"code","count":1,"path":"api/tags/code.json"}],"author":{"name":"Zhongkang Shen","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/18032128?s=96&v=4","link":"/","description":"太阳玄烨","socials":{"github":"https://github.com/shenzhongkang","twitter":"https://twitter.com/shenzhongkang","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/shenzhongkang","zhihu":"","csdn":"https://blog.csdn.net/shenzhongkang","juejin":"","customs":{}}}},"next_post":{"title":"Code Editor","uid":"d6857a020c2a18887ebb33b9a47ceff4","slug":"js-code-editor","date":"2020-11-25T06:40:23.000Z","updated":"2023-01-12T09:50:07.540Z","comments":true,"path":"api/articles/js-code-editor.json","keywords":null,"cover":"https://images.unsplash.com/photo-1649180564403-db28d5673f48?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2324&q=80","text":"Code Editor Codemirror想要在 react 中使用 codemirror，有两种主要的方式，一种是直接使用 codemirror 这个包，另外一种是使用 codemirror 作为语法和样式库，然后另外使用开发者自行封装的 react 受控或非受控组件。 仅使...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"frontend","slug":"frontend","count":13,"path":"api/categories/frontend.json"},{"name":"react","slug":"frontend/react","count":5,"path":"api/categories/frontend/react.json"}],"tags":[{"name":"frontend","slug":"frontend","count":12,"path":"api/tags/frontend.json"},{"name":"react","slug":"react","count":5,"path":"api/tags/react.json"},{"name":"codemirror","slug":"codemirror","count":3,"path":"api/tags/codemirror.json"}],"author":{"name":"Zhongkang Shen","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/18032128?s=96&v=4","link":"/","description":"太阳玄烨","socials":{"github":"https://github.com/shenzhongkang","twitter":"https://twitter.com/shenzhongkang","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/shenzhongkang","zhihu":"","csdn":"https://blog.csdn.net/shenzhongkang","juejin":"","customs":{}}}}}